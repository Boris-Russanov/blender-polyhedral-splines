from math import factorial
import math
import numpy as np

"""
    SCALER MATRICES ARE DEFINED PRIOR TO COMPUTATION FOR BETTER PERFORMANCE
"""
matrixLUT = {
	"33": np.array([
		[1,2,1,],
		[2,4,2,],
		[1,2,1,],
	]),
	"23": np.array([
		[1,2,1,],
		[1,2,1,],
	]),
	"32": np.array([
		[1,1,],
		[2,2,],
		[1,1,],
	]),
	"44": np.array([
		[1,3,3,1,],
		[3,9,9,3,],
		[3,9,9,3,],
		[1,3,3,1,],
	]),
	"34": np.array([
		[1,3,3,1,],
		[2,6,6,2,],
		[1,3,3,1,],
	]),
	"43": np.array([
		[1,2,1,],
		[3,6,3,],
		[3,6,3,],
		[1,2,1,],
	]),
	"55": np.array([
		[1,4,6,4,1,],
		[4,16,24,16,4,],
		[6,24,36,24,6,],
		[4,16,24,16,4,],
		[1,4,6,4,1,],
	]),
	"45": np.array([
		[1,4,6,4,1,],
		[3,12,18,12,3,],
		[3,12,18,12,3,],
		[1,4,6,4,1,],
	]),
	"54": np.array([
		[1,3,3,1,],
		[4,12,12,4,],
		[6,18,18,6,],
		[4,12,12,4,],
		[1,3,3,1,],
	]),
	"66": np.array([
		[1,5,10,10,5,1,],
		[5,25,50,50,25,5,],
		[10,50,100,100,50,10,],
		[10,50,100,100,50,10,],
		[5,25,50,50,25,5,],
		[1,5,10,10,5,1,],
	]),
	"56": np.array([
		[1,5,10,10,5,1,],
		[4,20,40,40,20,4,],
		[6,30,60,60,30,6,],
		[4,20,40,40,20,4,],
		[1,5,10,10,5,1,],
	]),
	"65": np.array([
		[1,4,6,4,1,],
		[5,20,30,20,5,],
		[10,40,60,40,10,],
		[10,40,60,40,10,],
		[5,20,30,20,5,],
		[1,4,6,4,1,],
	]),
	"77": np.array([
		[1,6,15,20,15,6,1,],
		[6,36,90,120,90,36,6,],
		[15,90,225,300,225,90,15,],
		[20,120,300,400,300,120,20,],
		[15,90,225,300,225,90,15,],
		[6,36,90,120,90,36,6,],
		[1,6,15,20,15,6,1,],
	]),
	"67": np.array([
		[1,6,15,20,15,6,1,],
		[5,30,75,100,75,30,5,],
		[10,60,150,200,150,60,10,],
		[10,60,150,200,150,60,10,],
		[5,30,75,100,75,30,5,],
		[1,6,15,20,15,6,1,],
	]),
	"76": np.array([
		[1,5,10,10,5,1,],
		[6,30,60,60,30,6,],
		[15,75,150,150,75,15,],
		[20,100,200,200,100,20,],
		[15,75,150,150,75,15,],
		[6,30,60,60,30,6,],
		[1,5,10,10,5,1,],
	]),
	"88": np.array([
		[1,7,21,35,35,21,7,1,],
		[7,49,147,245,245,147,49,7,],
		[21,147,441,735,735,441,147,21,],
		[35,245,735,1225,1225,735,245,35,],
		[35,245,735,1225,1225,735,245,35,],
		[21,147,441,735,735,441,147,21,],
		[7,49,147,245,245,147,49,7,],
		[1,7,21,35,35,21,7,1,],
	]),
	"78": np.array([
		[1,7,21,35,35,21,7,1,],
		[6,42,126,210,210,126,42,6,],
		[15,105,315,525,525,315,105,15,],
		[20,140,420,700,700,420,140,20,],
		[15,105,315,525,525,315,105,15,],
		[6,42,126,210,210,126,42,6,],
		[1,7,21,35,35,21,7,1,],
	]),
	"87": np.array([
		[1,6,15,20,15,6,1,],
		[7,42,105,140,105,42,7,],
		[21,126,315,420,315,126,21,],
		[35,210,525,700,525,210,35,],
		[35,210,525,700,525,210,35,],
		[21,126,315,420,315,126,21,],
		[7,42,105,140,105,42,7,],
		[1,6,15,20,15,6,1,],
	]),
	"99": np.array([
		[1,8,28,56,70,56,28,8,1,],
		[8,64,224,448,560,448,224,64,8,],
		[28,224,784,1568,1960,1568,784,224,28,],
		[56,448,1568,3136,3920,3136,1568,448,56,],
		[70,560,1960,3920,4900,3920,1960,560,70,],
		[56,448,1568,3136,3920,3136,1568,448,56,],
		[28,224,784,1568,1960,1568,784,224,28,],
		[8,64,224,448,560,448,224,64,8,],
		[1,8,28,56,70,56,28,8,1,],
	]),
	"89": np.array([
		[1,8,28,56,70,56,28,8,1,],
		[7,56,196,392,490,392,196,56,7,],
		[21,168,588,1176,1470,1176,588,168,21,],
		[35,280,980,1960,2450,1960,980,280,35,],
		[35,280,980,1960,2450,1960,980,280,35,],
		[21,168,588,1176,1470,1176,588,168,21,],
		[7,56,196,392,490,392,196,56,7,],
		[1,8,28,56,70,56,28,8,1,],
	]),
	"98": np.array([
		[1,7,21,35,35,21,7,1,],
		[8,56,168,280,280,168,56,8,],
		[28,196,588,980,980,588,196,28,],
		[56,392,1176,1960,1960,1176,392,56,],
		[70,490,1470,2450,2450,1470,490,70,],
		[56,392,1176,1960,1960,1176,392,56,],
		[28,196,588,980,980,588,196,28,],
		[8,56,168,280,280,168,56,8,],
		[1,7,21,35,35,21,7,1,],
	]),
	"1010": np.array([
		[1,9,36,84,126,126,84,36,9,1,],
		[9,81,324,756,1134,1134,756,324,81,9,],
		[36,324,1296,3024,4536,4536,3024,1296,324,36,],
		[84,756,3024,7056,10584,10584,7056,3024,756,84,],
		[126,1134,4536,10584,15876,15876,10584,4536,1134,126,],
		[126,1134,4536,10584,15876,15876,10584,4536,1134,126,],
		[84,756,3024,7056,10584,10584,7056,3024,756,84,],
		[36,324,1296,3024,4536,4536,3024,1296,324,36,],
		[9,81,324,756,1134,1134,756,324,81,9,],
		[1,9,36,84,126,126,84,36,9,1,],
	]),
	"910": np.array([
		[1,9,36,84,126,126,84,36,9,1,],
		[8,72,288,672,1008,1008,672,288,72,8,],
		[28,252,1008,2352,3528,3528,2352,1008,252,28,],
		[56,504,2016,4704,7056,7056,4704,2016,504,56,],
		[70,630,2520,5880,8820,8820,5880,2520,630,70,],
		[56,504,2016,4704,7056,7056,4704,2016,504,56,],
		[28,252,1008,2352,3528,3528,2352,1008,252,28,],
		[8,72,288,672,1008,1008,672,288,72,8,],
		[1,9,36,84,126,126,84,36,9,1,],
	]),
	"109": np.array([
		[1,8,28,56,70,56,28,8,1,],
		[9,72,252,504,630,504,252,72,9,],
		[36,288,1008,2016,2520,2016,1008,288,36,],
		[84,672,2352,4704,5880,4704,2352,672,84,],
		[126,1008,3528,7056,8820,7056,3528,1008,126,],
		[126,1008,3528,7056,8820,7056,3528,1008,126,],
		[84,672,2352,4704,5880,4704,2352,672,84,],
		[36,288,1008,2016,2520,2016,1008,288,36,],
		[9,72,252,504,630,504,252,72,9,],
		[1,8,28,56,70,56,28,8,1,],
	]),
	"1111": np.array([
		[1,10,45,120,210,252,210,120,45,10,1,],
		[10,100,450,1200,2100,2520,2100,1200,450,100,10,],
		[45,450,2025,5400,9450,11340,9450,5400,2025,450,45,],
		[120,1200,5400,14400,25200,30240,25200,14400,5400,1200,120,],
		[210,2100,9450,25200,44100,52920,44100,25200,9450,2100,210,],
		[252,2520,11340,30240,52920,63504,52920,30240,11340,2520,252,],
		[210,2100,9450,25200,44100,52920,44100,25200,9450,2100,210,],
		[120,1200,5400,14400,25200,30240,25200,14400,5400,1200,120,],
		[45,450,2025,5400,9450,11340,9450,5400,2025,450,45,],
		[10,100,450,1200,2100,2520,2100,1200,450,100,10,],
		[1,10,45,120,210,252,210,120,45,10,1,],
	]),
	"1011": np.array([
		[1,10,45,120,210,252,210,120,45,10,1,],
		[9,90,405,1080,1890,2268,1890,1080,405,90,9,],
		[36,360,1620,4320,7560,9072,7560,4320,1620,360,36,],
		[84,840,3780,10080,17640,21168,17640,10080,3780,840,84,],
		[126,1260,5670,15120,26460,31752,26460,15120,5670,1260,126,],
		[126,1260,5670,15120,26460,31752,26460,15120,5670,1260,126,],
		[84,840,3780,10080,17640,21168,17640,10080,3780,840,84,],
		[36,360,1620,4320,7560,9072,7560,4320,1620,360,36,],
		[9,90,405,1080,1890,2268,1890,1080,405,90,9,],
		[1,10,45,120,210,252,210,120,45,10,1,],
	]),
	"1110": np.array([
		[1,9,36,84,126,126,84,36,9,1,],
		[10,90,360,840,1260,1260,840,360,90,10,],
		[45,405,1620,3780,5670,5670,3780,1620,405,45,],
		[120,1080,4320,10080,15120,15120,10080,4320,1080,120,],
		[210,1890,7560,17640,26460,26460,17640,7560,1890,210,],
		[252,2268,9072,21168,31752,31752,21168,9072,2268,252,],
		[210,1890,7560,17640,26460,26460,17640,7560,1890,210,],
		[120,1080,4320,10080,15120,15120,10080,4320,1080,120,],
		[45,405,1620,3780,5670,5670,3780,1620,405,45,],
		[10,90,360,840,1260,1260,840,360,90,10,],
		[1,9,36,84,126,126,84,36,9,1,],
	]),
	"1212": np.array([
		[1,11,55,165,330,462,462,330,165,55,11,1,],
		[11,121,605,1815,3630,5082,5082,3630,1815,605,121,11,],
		[55,605,3025,9075,18150,25410,25410,18150,9075,3025,605,55,],
		[165,1815,9075,27225,54450,76230,76230,54450,27225,9075,1815,165,],
		[330,3630,18150,54450,108900,152460,152460,108900,54450,18150,3630,330,],
		[462,5082,25410,76230,152460,213444,213444,152460,76230,25410,5082,462,],
		[462,5082,25410,76230,152460,213444,213444,152460,76230,25410,5082,462,],
		[330,3630,18150,54450,108900,152460,152460,108900,54450,18150,3630,330,],
		[165,1815,9075,27225,54450,76230,76230,54450,27225,9075,1815,165,],
		[55,605,3025,9075,18150,25410,25410,18150,9075,3025,605,55,],
		[11,121,605,1815,3630,5082,5082,3630,1815,605,121,11,],
		[1,11,55,165,330,462,462,330,165,55,11,1,],
	]),
	"1112": np.array([
		[1,11,55,165,330,462,462,330,165,55,11,1,],
		[10,110,550,1650,3300,4620,4620,3300,1650,550,110,10,],
		[45,495,2475,7425,14850,20790,20790,14850,7425,2475,495,45,],
		[120,1320,6600,19800,39600,55440,55440,39600,19800,6600,1320,120,],
		[210,2310,11550,34650,69300,97020,97020,69300,34650,11550,2310,210,],
		[252,2772,13860,41580,83160,116424,116424,83160,41580,13860,2772,252,],
		[210,2310,11550,34650,69300,97020,97020,69300,34650,11550,2310,210,],
		[120,1320,6600,19800,39600,55440,55440,39600,19800,6600,1320,120,],
		[45,495,2475,7425,14850,20790,20790,14850,7425,2475,495,45,],
		[10,110,550,1650,3300,4620,4620,3300,1650,550,110,10,],
		[1,11,55,165,330,462,462,330,165,55,11,1,],
	]),
	"1211": np.array([
		[1,10,45,120,210,252,210,120,45,10,1,],
		[11,110,495,1320,2310,2772,2310,1320,495,110,11,],
		[55,550,2475,6600,11550,13860,11550,6600,2475,550,55,],
		[165,1650,7425,19800,34650,41580,34650,19800,7425,1650,165,],
		[330,3300,14850,39600,69300,83160,69300,39600,14850,3300,330,],
		[462,4620,20790,55440,97020,116424,97020,55440,20790,4620,462,],
		[462,4620,20790,55440,97020,116424,97020,55440,20790,4620,462,],
		[330,3300,14850,39600,69300,83160,69300,39600,14850,3300,330,],
		[165,1650,7425,19800,34650,41580,34650,19800,7425,1650,165,],
		[55,550,2475,6600,11550,13860,11550,6600,2475,550,55,],
		[11,110,495,1320,2310,2772,2310,1320,495,110,11,],
		[1,10,45,120,210,252,210,120,45,10,1,],
	]),
	"1313": np.array([
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
		[12,144,792,2640,5940,9504,11088,9504,5940,2640,792,144,12,],
		[66,792,4356,14520,32670,52272,60984,52272,32670,14520,4356,792,66,],
		[220,2640,14520,48400,108900,174240,203280,174240,108900,48400,14520,2640,220,],
		[495,5940,32670,108900,245025,392040,457380,392040,245025,108900,32670,5940,495,],
		[792,9504,52272,174240,392040,627264,731808,627264,392040,174240,52272,9504,792,],
		[924,11088,60984,203280,457380,731808,853776,731808,457380,203280,60984,11088,924,],
		[792,9504,52272,174240,392040,627264,731808,627264,392040,174240,52272,9504,792,],
		[495,5940,32670,108900,245025,392040,457380,392040,245025,108900,32670,5940,495,],
		[220,2640,14520,48400,108900,174240,203280,174240,108900,48400,14520,2640,220,],
		[66,792,4356,14520,32670,52272,60984,52272,32670,14520,4356,792,66,],
		[12,144,792,2640,5940,9504,11088,9504,5940,2640,792,144,12,],
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
	]),
	"1213": np.array([
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
		[11,132,726,2420,5445,8712,10164,8712,5445,2420,726,132,11,],
		[55,660,3630,12100,27225,43560,50820,43560,27225,12100,3630,660,55,],
		[165,1980,10890,36300,81675,130680,152460,130680,81675,36300,10890,1980,165,],
		[330,3960,21780,72600,163350,261360,304920,261360,163350,72600,21780,3960,330,],
		[462,5544,30492,101640,228690,365904,426888,365904,228690,101640,30492,5544,462,],
		[462,5544,30492,101640,228690,365904,426888,365904,228690,101640,30492,5544,462,],
		[330,3960,21780,72600,163350,261360,304920,261360,163350,72600,21780,3960,330,],
		[165,1980,10890,36300,81675,130680,152460,130680,81675,36300,10890,1980,165,],
		[55,660,3630,12100,27225,43560,50820,43560,27225,12100,3630,660,55,],
		[11,132,726,2420,5445,8712,10164,8712,5445,2420,726,132,11,],
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
	]),
	"1312": np.array([
		[1,11,55,165,330,462,462,330,165,55,11,1,],
		[12,132,660,1980,3960,5544,5544,3960,1980,660,132,12,],
		[66,726,3630,10890,21780,30492,30492,21780,10890,3630,726,66,],
		[220,2420,12100,36300,72600,101640,101640,72600,36300,12100,2420,220,],
		[495,5445,27225,81675,163350,228690,228690,163350,81675,27225,5445,495,],
		[792,8712,43560,130680,261360,365904,365904,261360,130680,43560,8712,792,],
		[924,10164,50820,152460,304920,426888,426888,304920,152460,50820,10164,924,],
		[792,8712,43560,130680,261360,365904,365904,261360,130680,43560,8712,792,],
		[495,5445,27225,81675,163350,228690,228690,163350,81675,27225,5445,495,],
		[220,2420,12100,36300,72600,101640,101640,72600,36300,12100,2420,220,],
		[66,726,3630,10890,21780,30492,30492,21780,10890,3630,726,66,],
		[12,132,660,1980,3960,5544,5544,3960,1980,660,132,12,],
		[1,11,55,165,330,462,462,330,165,55,11,1,],
	]),
	"1414": np.array([
		[1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,],
		[13,169,1014,3718,9295,16731,22308,22308,16731,9295,3718,1014,169,13,],
		[78,1014,6084,22308,55770,100386,133848,133848,100386,55770,22308,6084,1014,78,],
		[286,3718,22308,81796,204490,368082,490776,490776,368082,204490,81796,22308,3718,286,],
		[715,9295,55770,204490,511225,920205,1226940,1226940,920205,511225,204490,55770,9295,715,],
		[1287,16731,100386,368082,920205,1656369,2208492,2208492,1656369,920205,368082,100386,16731,1287,],
		[1716,22308,133848,490776,1226940,2208492,2944656,2944656,2208492,1226940,490776,133848,22308,1716,],
		[1716,22308,133848,490776,1226940,2208492,2944656,2944656,2208492,1226940,490776,133848,22308,1716,],
		[1287,16731,100386,368082,920205,1656369,2208492,2208492,1656369,920205,368082,100386,16731,1287,],
		[715,9295,55770,204490,511225,920205,1226940,1226940,920205,511225,204490,55770,9295,715,],
		[286,3718,22308,81796,204490,368082,490776,490776,368082,204490,81796,22308,3718,286,],
		[78,1014,6084,22308,55770,100386,133848,133848,100386,55770,22308,6084,1014,78,],
		[13,169,1014,3718,9295,16731,22308,22308,16731,9295,3718,1014,169,13,],
		[1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,],
	]),
	"1314": np.array([
		[1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,],
		[12,156,936,3432,8580,15444,20592,20592,15444,8580,3432,936,156,12,],
		[66,858,5148,18876,47190,84942,113256,113256,84942,47190,18876,5148,858,66,],
		[220,2860,17160,62920,157300,283140,377520,377520,283140,157300,62920,17160,2860,220,],
		[495,6435,38610,141570,353925,637065,849420,849420,637065,353925,141570,38610,6435,495,],
		[792,10296,61776,226512,566280,1019304,1359072,1359072,1019304,566280,226512,61776,10296,792,],
		[924,12012,72072,264264,660660,1189188,1585584,1585584,1189188,660660,264264,72072,12012,924,],
		[792,10296,61776,226512,566280,1019304,1359072,1359072,1019304,566280,226512,61776,10296,792,],
		[495,6435,38610,141570,353925,637065,849420,849420,637065,353925,141570,38610,6435,495,],
		[220,2860,17160,62920,157300,283140,377520,377520,283140,157300,62920,17160,2860,220,],
		[66,858,5148,18876,47190,84942,113256,113256,84942,47190,18876,5148,858,66,],
		[12,156,936,3432,8580,15444,20592,20592,15444,8580,3432,936,156,12,],
		[1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,],
	]),
	"1413": np.array([
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
		[13,156,858,2860,6435,10296,12012,10296,6435,2860,858,156,13,],
		[78,936,5148,17160,38610,61776,72072,61776,38610,17160,5148,936,78,],
		[286,3432,18876,62920,141570,226512,264264,226512,141570,62920,18876,3432,286,],
		[715,8580,47190,157300,353925,566280,660660,566280,353925,157300,47190,8580,715,],
		[1287,15444,84942,283140,637065,1019304,1189188,1019304,637065,283140,84942,15444,1287,],
		[1716,20592,113256,377520,849420,1359072,1585584,1359072,849420,377520,113256,20592,1716,],
		[1716,20592,113256,377520,849420,1359072,1585584,1359072,849420,377520,113256,20592,1716,],
		[1287,15444,84942,283140,637065,1019304,1189188,1019304,637065,283140,84942,15444,1287,],
		[715,8580,47190,157300,353925,566280,660660,566280,353925,157300,47190,8580,715,],
		[286,3432,18876,62920,141570,226512,264264,226512,141570,62920,18876,3432,286,],
		[78,936,5148,17160,38610,61776,72072,61776,38610,17160,5148,936,78,],
		[13,156,858,2860,6435,10296,12012,10296,6435,2860,858,156,13,],
		[1,12,66,220,495,792,924,792,495,220,66,12,1,],
	])
}

"""
    ALGORITHMS FOR MANIPULATING BERNSTEIN BEZIER POLYNOMIALS
"""
#Take the derivative of a bernstein polynomial in the u direction
def bbUDir(poly): 
    #matrix math
    leftCols = poly[:, :len(poly[0]) - 1]
    rightCols = poly[:, 1:]
    colDirs = rightCols - leftCols
    return colDirs * (len(poly[0]) - 1)
    #Take the derivative of a bernstein polynomial in the v direction
def bbVDir(poly):
    upRows = poly[:len(poly)-1,:]
    botRows = poly[1:,:]
    rowDirs = botRows - upRows
    return rowDirs * (len(poly)-1)
#multiply two bernstein polynomials
#TODO: maybe have a dictionary of scalerMatrices and have the function determine which scalar matrix to use based on the dimensions of the two bernstein polynomials
def bbMult(poly1, poly2):
    scalerKey1 = str(len(poly1)) + str(len(poly1[0]))
    scalerKey2 = str(len(poly2)) + str(len(poly2[0]))
    descalerKey = str(len(poly1)+len(poly2)-1) * 2
    scaledPoly1 = poly1 * matrixLUT[scalerKey1]
    scaledPoly2 = poly2 * matrixLUT[scalerKey2]
    newScaledPoly = np.zeros((len(scaledPoly1)+len(scaledPoly2)-1, len(scaledPoly1[0]) + len(scaledPoly2[0]) - 1))
    for vi in range(0, len(poly1)):
        for ui in range(0, len(poly1[0])):
            for vj in range(0, len(poly2)):
                for uj in range(0, len(poly2[0])):
                    newScaledPoly[vi+vj][ui+uj] = newScaledPoly[vi+vj][ui+uj] + scaledPoly1[vi][ui] * scaledPoly2[vj][uj]
    return newScaledPoly / matrixLUT[descalerKey]

def bbDefIntegral(poly):
    return np.sum(poly) / (len(poly) * len(poly[0]))

class bbFunctions:

    @staticmethod
    def zerothMoment(xCoefs, yCoefs, zCoefs):
        dxdu = bbUDir(xCoefs)
        dydv = bbVDir(yCoefs)
        xuyv = bbMult(dxdu, dydv)
        dxdv = bbVDir(xCoefs)
        dydu = bbUDir(yCoefs)
        xvyu = bbMult(dxdv, dydu)
        n3 = xuyv - xvyu
        zn = bbMult(n3, zCoefs)
        return(bbDefIntegral(zn))
    @staticmethod
    def firstMoment(xCoefs, yCoefs, zCoefs):
        dxdu = bbUDir(xCoefs)
        dydv = bbVDir(yCoefs)
        xuyv = bbMult(dxdu, dydv)
        dxdv = bbVDir(xCoefs)
        dydu = bbUDir(yCoefs)
        xvyu = bbMult(dxdv, dydu)
        n3 = xuyv - xvyu
        zn = bbMult(n3, zCoefs)
        m1 = bbDefIntegral(bbMult(zn, xCoefs))
        m2 = bbDefIntegral(bbMult(zn, yCoefs))
        m3 = bbDefIntegral(bbMult(zn, zCoefs))
        
        return m1,m2,m3
